import torch
from parler_tts import ParlerTTSForConditionalGeneration
from transformers import AutoTokenizer
import soundfile as sf
import numpy as np
import warnings
import time
from concurrent.futures import ThreadPoolExecutor
import re

warnings.filterwarnings("ignore")

# ------------------ Configuration ------------------
class TTSConfig:
    MODEL_NAME = "ai4bharat/indic-parler-tts-pretrained"
    VOICE_DESCRIPTION = "A professional female speaker Anu, speaks with clear pronunciation and moderate pacing"
    OUTPUT_FILE = "kannada_tts_cpu.wav"
    SILENCE_PAUSE = 0.15
    BATCH_SIZE = 2  # Smaller batch size for CPU
    GENERATION_CONFIG = {
        'do_sample': True,
        'temperature': 0.95,
        'top_k': 50,
        'top_p': 0.95,
        'max_new_tokens': 1024,
        'num_beams': 1,
        'use_cache': True
    }

# ------------------ Text Preprocessing ------------------
number_map = {
    "0": "‡≤∏‡≥ä‡≤®‡≥ç‡≤®‡≥Ü", "1": "‡≤í‡≤Ç‡≤¶‡≥Å", "2": "‡≤é‡≤∞‡≤°‡≥Å", "3": "‡≤Æ‡≥Ç‡≤∞‡≥Å", "4": "‡≤®‡≤æ‡≤≤‡≥ç‡≤ï‡≥Å",
    "5": "‡≤ê‡≤¶‡≥Å", "6": "‡≤Ü‡≤∞‡≥Å", "7": "‡≤è‡≤≥‡≥Å", "8": "‡≤é‡≤Ç‡≤ü‡≥Å", "9": "‡≤í‡≤Ç‡≤≠‡≤§‡≥ç‡≤§‡≥Å",
    "10": "‡≤π‡≤§‡≥ç‡≤§‡≥Å", "50": "‡≤ê‡≤µ‡≤§‡≥ç‡≤§‡≥Å", "100": "‡≤®‡≥Ç‡≤∞‡≥Å", "2000": "‡≤é‡≤∞‡≤°‡≥Å ‡≤∏‡≤æ‡≤µ‡≤ø‡≤∞",
    "2024": "‡≤é‡≤∞‡≤°‡≥Å ‡≤∏‡≤æ‡≤µ‡≤ø‡≤∞ ‡≤á‡≤™‡≥ç‡≤™‡≤§‡≥ç‡≤§‡≥ç‡≤®‡≤æ‡≤≤‡≥ç‡≤ï‡≥Å", "50000000": "‡≤ê‡≤¶‡≥Å ‡≤ï‡≥ã‡≤ü‡≤ø"
}

kannada_digit_map = {
    "‡≥¶": "‡≤∏‡≥ä‡≤®‡≥ç‡≤®‡≥Ü", "‡≥ß": "‡≤í‡≤Ç‡≤¶‡≥Å", "‡≥®": "‡≤é‡≤∞‡≤°‡≥Å", "‡≥©": "‡≤Æ‡≥Ç‡≤∞‡≥Å", 
    "‡≥™": "‡≤®‡≤æ‡≤≤‡≥ç‡≤ï‡≥Å", "‡≥´": "‡≤ê‡≤¶‡≥Å", "‡≥¨": "‡≤Ü‡≤∞‡≥Å", "‡≥≠": "‡≤è‡≤≥‡≥Å", "‡≥Æ": "‡≤é‡≤Ç‡≤ü‡≥Å", "‡≥Ø": "‡≤í‡≤Ç‡≤≠‡≤§‡≥ç‡≤§‡≥Å"
}

def replace_numbers_with_kannada_words(text):
    def replace_match(match):
        number = match.group(0)
        return number_map.get(number, number)
    text = re.sub(r'\d+', replace_match, text)
    for digit, word in kannada_digit_map.items():
        text = text.replace(digit, word)
    return text

# ------------------ TTS Engine ------------------
class TTSEngine:
    def __init__(self):
        self.device = torch.device("cpu")
        self.torch_dtype = torch.float32
        self.model = None
        self.tokenizer = None
        self.description_tokenizer = None
        self.description_inputs = None
        
    def load_model(self):
        try:
            print("‚è≥ Loading model on CPU...")
            self.model = ParlerTTSForConditionalGeneration.from_pretrained(
                TTSConfig.MODEL_NAME,
                torch_dtype=self.torch_dtype
            ).to(self.device)
            self.model.eval()
        except Exception as e:
            print(f"‚ùå Error loading model: {e}")
            return False
        
        try:
            self.tokenizer = AutoTokenizer.from_pretrained(TTSConfig.MODEL_NAME)
            self.description_tokenizer = AutoTokenizer.from_pretrained(self.model.config.text_encoder._name_or_path)
            
            with torch.no_grad():
                self.description_inputs = self.description_tokenizer(
                    TTSConfig.VOICE_DESCRIPTION,
                    return_tensors="pt",
                    max_length=512,
                    truncation=True
                ).to(self.device)
        except Exception as e:
            print(f"‚ùå Error loading tokenizers: {e}")
            return False
        
        return True
    
    def process_sentence(self, sentence):
        try:
            with torch.no_grad():
                inputs = self.tokenizer(
                    sentence,
                    return_tensors="pt",
                    max_length=512,
                    truncation=True
                ).to(self.device)
                
                audio = self.model.generate(
                    input_ids=self.description_inputs.input_ids,
                    attention_mask=self.description_inputs.attention_mask,
                    prompt_input_ids=inputs.input_ids,
                    prompt_attention_mask=inputs.attention_mask,
                    **TTSConfig.GENERATION_CONFIG
                )
                return audio.cpu().numpy().squeeze().astype('float32')
        except Exception as e:
            print(f"‚ö† Error processing sentence: {e}")
            return None

# ------------------ Threading-based Parallel Processing ------------------
def threading_based_parallel(sentences):
    print("üîß Starting THREADING-based CPU processing...")
    start_time = time.time()
    
    engine = TTSEngine()
    if not engine.load_model():
        print("‚ùå Model could not be loaded. Exiting.")
        return None, 0
    
    full_audio = np.array([])
    sampling_rate = engine.model.config.sampling_rate
    
    for i in range(0, len(sentences), TTSConfig.BATCH_SIZE):
        batch = sentences[i:i + TTSConfig.BATCH_SIZE]
        with ThreadPoolExecutor(max_workers=min(len(batch), TTSConfig.BATCH_SIZE)) as executor:
            batch_results = list(executor.map(engine.process_sentence, batch))
        
        for j, audio_arr in enumerate(batch_results):
            if audio_arr is not None:
                full_audio = np.concatenate((full_audio, audio_arr))
                if j < len(batch_results) - 1 or i + TTSConfig.BATCH_SIZE < len(sentences):
                    full_audio = np.concatenate((
                        full_audio,
                        np.zeros(int(TTSConfig.SILENCE_PAUSE * sampling_rate))
                    ))
        print(f"‚úÖ Processed batch {i//TTSConfig.BATCH_SIZE + 1}/{(len(sentences)//TTSConfig.BATCH_SIZE) + 1}")
    
    total_time = time.time() - start_time
    print(f"‚úÖ CPU threading processing completed in {total_time:.2f} seconds")
    return full_audio, total_time

# ------------------ Main Execution ------------------
def main():
    print("=" * 60)
    print("üéØ CPU-ONLY Kannada TTS Demo")
    print("=" * 60)
    
    # Sample Kannada text (5 sentences)
    kannada_text = """
    ‡≤ï‡≤®‡≥ç‡≤®‡≤° ‡≤≠‡≤æ‡≤∑‡≥Ü ‡≤≠‡≤æ‡≤∞‡≤§‡≤¶ ‡≤ï‡≤∞‡≥ç‡≤®‡≤æ‡≤ü‡≤ï ‡≤∞‡≤æ‡≤ú‡≥ç‡≤Ø‡≤¶ ‡≤Ö‡≤ß‡≤ø‡≤ï‡≥É‡≤§ ‡≤≠‡≤æ‡≤∑‡≥Ü‡≤Ø‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü.
    ‡≤á‡≤¶‡≥Å ‡≤¶‡≥ç‡≤∞‡≤æ‡≤µ‡≤ø‡≤° ‡≤≠‡≤æ‡≤∑‡≤æ ‡≤ï‡≥Å‡≤ü‡≥Å‡≤Ç‡≤¨‡≤ï‡≥ç‡≤ï‡≥Ü ‡≤∏‡≥á‡≤∞‡≤ø‡≤¶‡≥Ü ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤∏‡≥Å‡≤Æ‡≤æ‡≤∞‡≥Å ‡≥´ ‡≤ï‡≥ã‡≤ü‡≤ø ‡≤ú‡≤®‡≤∞‡≥Å ‡≤Æ‡≤æ‡≤§‡≤®‡≤æ‡≤°‡≥Å‡≤µ ‡≤™‡≥ç‡≤∞‡≤Æ‡≥Å‡≤ñ ‡≤≠‡≤æ‡≤∑‡≥Ü‡≤Ø‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü.
    ‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤µ‡≥Å ‡≤Ö‡≤§‡≥ç‡≤Ø‡≤Ç‡≤§ ‡≤™‡≥ç‡≤∞‡≤æ‡≤ö‡≥Ä‡≤® ‡≤≠‡≤æ‡≤∑‡≥Ü‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø‡≥ä‡≤Ç‡≤¶‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü, ‡≤á‡≤¶‡≤∞ ‡≤á‡≤§‡≤ø‡≤π‡≤æ‡≤∏ ‡≤∏‡≥Å‡≤Æ‡≤æ‡≤∞‡≥Å 2000 ‡≤µ‡≤∞‡≥ç‡≤∑‡≤ó‡≤≥‡≤∑‡≥ç‡≤ü‡≥Å ‡≤π‡≤ø‡≤Ç‡≤¶‡≤ï‡≥ç‡≤ï‡≥Ü ‡≤π‡≥ã‡≤ó‡≥Å‡≤§‡≥ç‡≤§‡≤¶‡≥Ü.
    ‡≤ï‡≤®‡≥ç‡≤®‡≤° ‡≤∏‡≤æ‡≤π‡≤ø‡≤§‡≥ç‡≤Ø‡≤µ‡≥Å ‡≤Ö‡≤∏‡≤Ç‡≤ñ‡≥ç‡≤Ø‡≤æ‡≤§ ‡≤ï‡≤µ‡≤ø‡≤ó‡≤≥‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤≤‡≥á‡≤ñ‡≤ï‡≤∞‡≤ø‡≤Ç‡≤¶ ‡≤∏‡≤Æ‡≥É‡≤¶‡≥ç‡≤ß‡≤µ‡≤æ‡≤ó‡≤ø ‡≤¨‡≥Ü‡≤≥‡≥Ü‡≤¶‡≥Å ‡≤¨‡≤Ç‡≤¶‡≤ø‡≤¶‡≥Ü.
    ‡≤ï‡≥Å‡≤µ‡≥Ü‡≤Ç‡≤™‡≥Å, ‡≤¨‡≥á‡≤Ç‡≤¶‡≥ç‡≤∞‡≥Ü, ‡≤ï‡≤æ‡≤∞‡≤Ç‡≤§‡≤∞‡≤Ç‡≤§‡≤π ‡≤Æ‡≤π‡≤æ‡≤®‡≥ç ‡≤∏‡≤æ‡≤π‡≤ø‡≤§‡≤ø‡≤ó‡≤≥‡≥Å ‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤ï‡≥ç‡≤ï‡≥Ü ‡≤Ö‡≤™‡≤æ‡≤∞ ‡≤ï‡≥ä‡≤°‡≥Å‡≤ó‡≥Ü ‡≤®‡≥Ä‡≤°‡≤ø‡≤¶‡≥ç‡≤¶‡≤æ‡≤∞‡≥Ü.
    """.strip()
    
    kannada_text = replace_numbers_with_kannada_words(kannada_text)
    sentences = [s.strip() + '.' for s in kannada_text.split('.') if s.strip()]
    
    print(f"üìä Dataset: {len(sentences)} sentences, {len(kannada_text)} characters")
    
    # Run threading-based CPU processing
    audio, total_time = threading_based_parallel(sentences)
    if audio is not None:
        sf.write(TTSConfig.OUTPUT_FILE, audio, 24000)
        print(f"üíæ Output saved to: {TTSConfig.OUTPUT_FILE}")
        print(f"‚è± Duration: {len(audio)/24000:.2f} seconds")
        print(f"‚è± Total processing time: {total_time:.2f} seconds")

if __name__ == "__main__":
    main()
